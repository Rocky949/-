package com.li.factory;

import com.li.service.CountService;

import java.io.InputStream;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

public class BeanFactory {
    private static Properties properties;
    private static Map<String,Object> map;
    //在静态代码块中得到value
    static{
        try {
            properties = new Properties();
            map = new HashMap<String,Object>();
            ClassLoader classLoader = BeanFactory.class.getClassLoader();
            InputStream in = classLoader.getResourceAsStream("beans.properties");
            properties.load(in);
            //单例：得到map里的所有keys，实例，放入map容器里，之后需要对象的时候直接取出来
            //由于在static里面，所有对象只会创建一次
            Enumeration<Object> keys = properties.keys();
            //遍历keys
            while(keys.hasMoreElements()){
                //取出每个key
                String key = keys.nextElement().toString();
                //根据每个key获得value
                String property = properties.getProperty(key);
                //实例化
                Object bean = Class.forName(property).newInstance();
                //放入map
                map.put(key,bean);

            }
        } catch (Exception e) {
            throw new ExceptionInInitializerError();
        }
    }
    //单例：直接从容器中获取对象
    public static Object getBeans(String beanName){
        return map.get(beanName);
    }
}

